;doRobotStuff.txt
;Moves my robot forward, until it's whiskers move, then reverse, turn right,
; then continue going forward once it's whiskers hit something else,
; turn left twice (turning all the way around), and then continue going forward
;@author: Eddie Gurnee
;@version: 4/21/2014
; uncomment following two lines if using 16f627 or 16f628.
	LIST	p=16F628				;tell assembler what chip we are using
	include "P16F628.inc"			;include the defaults for the chip
	__config 0x3D18					;sets the configuration settings (oscillator type etc.)

; We are telling the assembler we want to start allocating symbolic variables starting
;    at machine location 0x20.

cblock 	0x20 						;start of general purpose registers
		dReg1						;dReg1 is used in the delay routines
		dReg2 						;dReg2 is used in the delay routines
		didTurnRight				;did the last interrupt turn right? (odd turned right)
		backTime					;time limit to backup
		numTurns					;used to track number of times rotated
		irData						;used to get info about the ir receiver
	endc

;standard operation for using interrupts
	org 0x00
			goto	main
	org 0x04
			goto	isr

main

;the following lines turn off the comparators
			movlw	0x07
			movwf	CMCON			;turn comparators off (make it like a 16F84)
		
;enabled interrupts on B0
			bsf		INTCON, GIE		;enable interrupts
			bsf		INTCON, INTE	;B0 is the interrupt line
	
;We must change memory banks to set the TRIS registers
			bsf		STATUS,RP0
			bcf		0x81, INTEDG	;falling edge interrupts
			movlw	b'00000001'
			movwf	TRISB			;PORTB is output, with RB0 as input (for the interrupt)
			movlw	b'11111001'
			movwf	TRISA			;PORTA is input, with RA1 and RA2 for output for the servos
			bcf		STATUS, RP0		;return to bank 0

;actual code follows here
			clrf	didTurnRight
			
driveLoop	call	goForward
			goto	driveLoop

;Subroutine: goForward
;Moves the robot forward by setting the right servo to run clockwise, 
; and the left servo to run counter-clockwise
;Precondition: Left wheel servo is connected to RA2, and right wheel servo is connected to RA1
;Postcondition: Robot moves forward
goForward	movlw	b'00000110'
			movwf	PORTA			;runs both servos as high
			call	wait1ms			;for 1ms
			
			bcf		PORTA, 1		;turns off right servo
			call	wait1ms			;for 1ms

			bcf		PORTA, 2		;turns off the left servo

			call	waiter			;waits for the rest of the required time
			return

;Subroutine: goBackward
;Moves the robot backward by setting the right servo to run counter-clockwise, 
; and the left servo to run clockwise
;Precondition: Left wheel servo is connected to RA2, and right wheel servo is connected to RA1
;Postcondition: Robot moves backward for a set amount of time
goBackward	movlw	0x50
			movwf	backTime

backward	movlw	b'00000110'
			movwf	PORTA			;runs both servos as high
			call	wait1ms			;for 1ms
			
			bcf		PORTA, 2		;turns off right servo
			call	wait1ms			;for 1ms

			bcf		PORTA, 1		;turns off the left servo

			call	waiter			;waits for the rest of the required time
			decfsz	backTime, f
			goto	backward
			
			return

;Subroutine: turnRight
;Rotates the robot to the right ~90°
;Precondition: wait1ms and waiter subroutines exist, and the robot is connected correctly
;Postcondition: the robot will have turned ~90° to the right
turnRight	movlw	0x20			;x20 times is close enough to 90° for me
			movwf	numTurns
rightStart	movlw	b'00000110'
			movwf	PORTA
			call 	wait1ms
			call	wait1ms			;waits for 2ms (forward full speed for both)

			movlw	0x00
			movwf	PORTA

			call	waiter
			decfsz	numTurns, f
			goto	rightStart
			
			return
			
;Subroutine: turnLeft
;Rotates the robot to the left ~180°
;Precondition: wait1ms and waiter subroutines exist, and the robot is connected correctly
;Postcondition: the robot will have turned ~90° to the left
turnLeft	movlw	0x20			;x20 times is close enough to 90° for me
			movwf	numTurns
leftStart	movlw	b'00000110'
			movwf	PORTA
			call	wait1ms			;waits for 1ms (reverse full speed for both)

			movlw	0x00
			movwf	PORTA

			call 	wait1ms			;waits for 1ms to keep the time between turning right and left the same
			call	waiter
			decfsz	numTurns, f
			goto	leftStart

			return

;Subroutine: waiter
;Pauses for 19500 µs, allowing the dude to move correctly
;Precondition: There exists registers to hold data for the delays
;Postcondition: 19500 instruction cycles have passed
waiter 		movlw	0x3A			;19493 cycles
			movwf	dReg1
			movlw	0x10
			movwf	dReg2
waiter_in	decfsz	dReg1, f
			goto	$+2
			decfsz	dReg2, f
			goto	waiter_in
			
			goto	$+1				;3 cycles
			nop
			
			return					;4 cycles (including call)
			
;Subroutine: wait1ms
;Pauses for 1ms, allowing the dude to move correctly
;Precondition: There exists registers to hold data for the delays
;Postcondition: 1ms has passed	
wait1ms		movlw	0xC6			;993 cycles
			movwf	dReg1
			movlw	0x01
			movwf	dReg2
wait1ms_in	decfsz	dReg1, f
			goto	$+2
			decfsz	dReg2, f
			goto	wait1ms_in
			
			goto	$+1				;3 cycles
			nop
			
			return					;4 cycles (including call)
			
;Subroutine: bitDelay
;the amount to wait between each read in bit
;Precondition: 
;Postcondition: 50 microseconds have passed
bitDelay	movlw	0x0F			;46 cycles
			movwf	dReg1
bitDelay_in	decfsz	dReg1, f
			goto	bitDelay_in
			
			return					;4 cycles (including call)

;Subroutine: initBitDelay
;the amount to wait between each read in bit
;Precondition: 
;Postcondition: 25 microseconds have passed
inBitDelay	movlw	0x06			;19 cycles
			movwf	dReg1
inBit_in	decfsz	dReg1, f
			goto	inBit_in
			
			goto	$+1				;2 cycles
			
			return					;4 cycles (including call)
			
;Subroutine: readIn
;Reads in the two three bits from the user
;Precondition: 
;Postcondition: 
readIn		rlf		irData, f
			movlw	0x01
			btfsc	PORTA, 0x06
			addwf	irData, f

			return
		
;all the interrupts
isr
; 	stop moving forward
				movlw	b'00000000'
				movwf	PORTA
			
; 	check if PORTA R6 (input from IR receivers) is high
				btfsc	PORTA, 0x06
				goto	isr_ir
				goto	isr_wall
			
;	if high, read two pulses
	isr_ir		call	inBitDelay
				call	readIn
				call	bitDelay
				call	readIn
				
				btfsc	readIn, 0x01
				goto	irFromRight
				
				call	turnRight
	irFromRight	call	turnLeft

;################# BELOW IS AS OF YET UNUSED #################
;		squeal in pain
; 		lower health
;		if health is at zero, power down
;		if high pulses == 0, the sender is on the right
;			turn left 90°
;		if high pulses == 1, the sender is on the left
;			turn right 90°
;		if high pulses > 1, the sender wants to turn on
;			turn on
;################# ABOVE IS AS OF YET UNUSED #################
	
; 	if low, standard backup and rotate interrupt
;		on each hit
	isr_wall
; back up
				incf	didTurnRight, f
				call	goBackward
				
; on odd hits
				btfsc	didTurnRight, 0
				goto	nowTurnLeft
				
; turn left 180°
				call	turnRight
				call	turnRight
				goto	endIsr
				
; turn right 90°
	nowTurnLeft	call	turnLeft
	
	endIsr		bcf		INTCON, INTF	;the reset interrupt should be at the 
										;end so it doesn't trip again while it is 
										;moving			
				retfie
; don't forget the word 'end' (it ends the code)
	end